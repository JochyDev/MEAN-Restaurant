{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Input, ContentChild, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, NgZone, Attribute, SkipSelf, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\n\nfunction CdkTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\n\nfunction CdkTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\n\nfunction mixinHasStickyInput(base) {\n  return class extends base {\n    constructor(...args) {\n      super(...args);\n      this._sticky = false;\n      /** Whether the sticky input has changed since it was last checked. */\n\n      this._hasStickyChanged = false;\n    }\n    /** Whether sticky positioning should be applied. */\n\n\n    get sticky() {\n      return this._sticky;\n    }\n\n    set sticky(v) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    /** Whether the sticky value has changed since this was last called. */\n\n\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n\n\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\n\n\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\n\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\nclass CdkCellDef {\n  constructor(\n  /** @docs-private */\n  template) {\n    this.template = template;\n  }\n\n}\n\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n  return new (t || CdkCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkCellDef,\n  selectors: [[\"\", \"cdkCellDef\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nclass CdkHeaderCellDef {\n  constructor(\n  /** @docs-private */\n  template) {\n    this.template = template;\n  }\n\n}\n\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n  return new (t || CdkHeaderCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkHeaderCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkHeaderCellDef,\n  selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nclass CdkFooterCellDef {\n  constructor(\n  /** @docs-private */\n  template) {\n    this.template = template;\n  }\n\n}\n\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n  return new (t || CdkFooterCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkFooterCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkFooterCellDef,\n  selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkColumnDef.\n\n/** @docs-private */\n\n\nclass CdkColumnDefBase {}\n\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n\n\nclass CdkColumnDef extends _CdkColumnDefBase {\n  constructor(_table) {\n    super();\n    this._table = _table;\n    this._stickyEnd = false;\n  }\n  /** Unique name for this column. */\n\n\n  get name() {\n    return this._name;\n  }\n\n  set name(name) {\n    this._setNameInput(name);\n  }\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   */\n\n\n  get stickyEnd() {\n    return this._stickyEnd;\n  }\n\n  set stickyEnd(v) {\n    const prevValue = this._stickyEnd;\n    this._stickyEnd = coerceBooleanProperty(v);\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\n  }\n  /**\n   * Overridable method that sets the css classes that will be added to every cell in this\n   * column.\n   * In the future, columnCssClassName will change from type string[] to string and this\n   * will set a single string value.\n   * @docs-private\n   */\n\n\n  _updateColumnCssClassName() {\n    this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n\n\n  _setNameInput(value) {\n    // If the directive is set without a name (updated programmatically), then this setter will\n    // trigger with an empty string and should not overwrite the programmatically set value.\n    if (value) {\n      this._name = value;\n      this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n\n      this._updateColumnCssClassName();\n    }\n  }\n\n}\n\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) {\n  return new (t || CdkColumnDef)(i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkColumnDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkColumnDef,\n  selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n  contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    }\n  },\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"cdkColumnDef\", \"name\"],\n    stickyEnd: \"stickyEnd\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: CdkColumnDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: CdkColumnDef\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input,\n      args: ['cdkColumnDef']\n    }],\n    stickyEnd: [{\n      type: Input,\n      args: ['stickyEnd']\n    }],\n    cell: [{\n      type: ContentChild,\n      args: [CdkCellDef]\n    }],\n    headerCell: [{\n      type: ContentChild,\n      args: [CdkHeaderCellDef]\n    }],\n    footerCell: [{\n      type: ContentChild,\n      args: [CdkFooterCellDef]\n    }]\n  });\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\n\n\nclass BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n  }\n\n}\n/** Header cell template container that adds the right classes and role. */\n\n\nclass CdkHeaderCell extends BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n\n}\n\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n  return new (t || CdkHeaderCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdkHeaderCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkHeaderCell,\n  selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-header-cell, th[cdk-header-cell]',\n      host: {\n        'class': 'cdk-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/** Footer cell template container that adds the right classes and role. */\n\n\nclass CdkFooterCell extends BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    var _a;\n\n    super(columnDef, elementRef);\n\n    if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n      const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n\n      const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n\n}\n\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n  return new (t || CdkFooterCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdkFooterCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkFooterCell,\n  selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n  hostAttrs: [1, \"cdk-footer-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n      host: {\n        'class': 'cdk-footer-cell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/** Cell template container that adds the right classes and role. */\n\n\nclass CdkCell extends BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    var _a;\n\n    super(columnDef, elementRef);\n\n    if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n      const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n\n      const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n\n}\n\nCdkCell.ɵfac = function CdkCell_Factory(t) {\n  return new (t || CdkCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdkCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkCell,\n  selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n  hostAttrs: [1, \"cdk-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-cell, td[cdk-cell]',\n      host: {\n        'class': 'cdk-cell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @docs-private\n */\n\n\nclass _Schedule {\n  constructor() {\n    this.tasks = [];\n    this.endTasks = [];\n  }\n\n}\n/** Injection token used to provide a coalesced style scheduler. */\n\n\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\n\n\nclass _CoalescedStyleScheduler {\n  constructor(_ngZone) {\n    this._ngZone = _ngZone;\n    this._currentSchedule = null;\n    this._destroyed = new Subject();\n  }\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n\n\n  schedule(task) {\n    this._createScheduleIfNeeded();\n\n    this._currentSchedule.tasks.push(task);\n  }\n  /**\n   * Schedules the specified task to run after other scheduled tasks at the end of the current\n   * VM turn.\n   */\n\n\n  scheduleEnd(task) {\n    this._createScheduleIfNeeded();\n\n    this._currentSchedule.endTasks.push(task);\n  }\n  /** Prevent any further tasks from running. */\n\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n\n  _createScheduleIfNeeded() {\n    if (this._currentSchedule) {\n      return;\n    }\n\n    this._currentSchedule = new _Schedule();\n\n    this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n      while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n        const schedule = this._currentSchedule; // Capture new tasks scheduled by the current set of tasks.\n\n        this._currentSchedule = new _Schedule();\n\n        for (const task of schedule.tasks) {\n          task();\n        }\n\n        for (const task of schedule.endTasks) {\n          task();\n        }\n      }\n\n      this._currentSchedule = null;\n    });\n  }\n\n  _getScheduleObservable() {\n    // Use onStable when in the context of an ongoing change detection cycle so that we\n    // do not accidentally trigger additional cycles.\n    return this._ngZone.isStable ? from(Promise.resolve(undefined)) : this._ngZone.onStable.pipe(take(1));\n  }\n\n}\n\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) {\n  return new (t || _CoalescedStyleScheduler)(i0.ɵɵinject(i0.NgZone));\n};\n\n_CoalescedStyleScheduler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _CoalescedStyleScheduler,\n  factory: _CoalescedStyleScheduler.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\n\n\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\n\nclass BaseRowDef {\n  constructor(\n  /** @docs-private */\n  template, _differs) {\n    this.template = template;\n    this._differs = _differs;\n  }\n\n  ngOnChanges(changes) {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      const columns = changes['columns'] && changes['columns'].currentValue || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n\n      this._columnsDiffer.diff(columns);\n    }\n  }\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   */\n\n\n  getColumnsDiff() {\n    return this._columnsDiffer.diff(this.columns);\n  }\n  /** Gets this row def's relevant cell template from the provided column def. */\n\n\n  extractCellTemplate(column) {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n\n}\n\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n  return new (t || BaseRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers));\n};\n\nBaseRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseRowDef,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseRowDef, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkHeaderRowDef.\n\n/** @docs-private */\n\n\nclass CdkHeaderRowDefBase extends BaseRowDef {}\n\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n  constructor(template, _differs, _table) {\n    super(template, _differs);\n    this._table = _table;\n  } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n\n}\n\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n  return new (t || CdkHeaderRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkHeaderRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkHeaderRowDef,\n  selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkHeaderRowDef\", \"columns\"],\n    sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderRowDef]',\n      inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkFooterRowDef.\n\n/** @docs-private */\n\n\nclass CdkFooterRowDefBase extends BaseRowDef {}\n\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n  constructor(template, _differs, _table) {\n    super(template, _differs);\n    this._table = _table;\n  } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n\n}\n\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n  return new (t || CdkFooterRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkFooterRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkFooterRowDef,\n  selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkFooterRowDef\", \"columns\"],\n    sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterRowDef]',\n      inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n\nclass CdkRowDef extends BaseRowDef {\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  constructor(template, _differs, _table) {\n    super(template, _differs);\n    this._table = _table;\n  }\n\n}\n\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n  return new (t || CdkRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkRowDef,\n  selectors: [[\"\", \"cdkRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkRowDefColumns\", \"columns\"],\n    when: [\"cdkRowDefWhen\", \"when\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkRowDef]',\n      inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n\n\nclass CdkCellOutlet {\n  constructor(_viewContainer) {\n    this._viewContainer = _viewContainer;\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\n\n\nCdkCellOutlet.mostRecentCellOutlet = null;\n\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n  return new (t || CdkCellOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\n\nCdkCellOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkCellOutlet,\n  selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCellOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }];\n  }, null);\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n\n\nclass CdkHeaderRow {}\n\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n  return new (t || CdkHeaderRow)();\n};\n\nCdkHeaderRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkHeaderRow,\n  selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-header-row, tr[cdk-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n\n\nclass CdkFooterRow {}\n\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n  return new (t || CdkFooterRow)();\n};\n\nCdkFooterRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkFooterRow,\n  selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-footer-row, tr[cdk-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n\n\nclass CdkRow {}\n\nCdkRow.ɵfac = function CdkRow_Factory(t) {\n  return new (t || CdkRow)();\n};\n\nCdkRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkRow,\n  selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-row, tr[cdk-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\n\n\nclass CdkNoDataRow {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n    this._contentClassName = 'cdk-no-data-row';\n  }\n\n}\n\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) {\n  return new (t || CdkNoDataRow)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkNoDataRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkNoDataRow,\n  selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkNoDataRow]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\n\n\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\n\nclass StickyStyler {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   */\n  constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._positionListener = _positionListener;\n    this._cachedCellWidths = [];\n    this._borderCellCss = {\n      'top': `${_stickCellCss}-border-elem-top`,\n      'bottom': `${_stickCellCss}-border-elem-bottom`,\n      'left': `${_stickCellCss}-border-elem-left`,\n      'right': `${_stickCellCss}-border-elem-right`\n    };\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n\n\n  clearStickyPositioning(rows, stickyDirections) {\n    const elementsToClear = [];\n\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n\n      elementsToClear.push(row);\n\n      for (let i = 0; i < row.children.length; i++) {\n        elementsToClear.push(row.children[i]);\n      }\n    } // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n\n\n    this._coalescedStyleScheduler.schedule(() => {\n      for (const element of elementsToClear) {\n        this._removeStickyStyle(element, stickyDirections);\n      }\n    });\n  }\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n   *     column cell. If `false` cached widths will be used instead.\n   */\n\n\n  updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n    if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: []\n        });\n\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: []\n        });\n      }\n\n      return;\n    }\n\n    const firstRow = rows[0];\n    const numCells = firstRow.children.length;\n\n    const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n\n    const lastStickyStart = stickyStartStates.lastIndexOf(true);\n    const firstStickyEnd = stickyEndStates.indexOf(true); // Coalesce with sticky row updates (and potentially other changes like column resize).\n\n    this._coalescedStyleScheduler.schedule(() => {\n      const isRtl = this.direction === 'rtl';\n      const start = isRtl ? 'right' : 'left';\n      const end = isRtl ? 'left' : 'right';\n\n      for (const row of rows) {\n        for (let i = 0; i < numCells; i++) {\n          const cell = row.children[i];\n\n          if (stickyStartStates[i]) {\n            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n          }\n\n          if (stickyEndStates[i]) {\n            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n          }\n        }\n      }\n\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map((width, index) => stickyStartStates[index] ? width : null)\n        });\n\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null).reverse()\n        });\n      }\n    });\n  }\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n\n\n  stickRows(rowsToStick, stickyStates, position) {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    } // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n    // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n    // sticky states need to be reversed as well.\n\n\n    const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n    const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates; // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n\n    const stickyOffsets = [];\n    const stickyCellHeights = [];\n    const elementsToStick = [];\n\n    for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n      if (!states[rowIndex]) {\n        continue;\n      }\n\n      stickyOffsets[rowIndex] = stickyOffset;\n      const row = rows[rowIndex];\n      elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n      const height = row.getBoundingClientRect().height;\n      stickyOffset += height;\n      stickyCellHeights[rowIndex] = height;\n    }\n\n    const borderedRowIndex = states.lastIndexOf(true); // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n    // (and potentially other changes like column resize).\n\n    this._coalescedStyleScheduler.schedule(() => {\n      var _a, _b;\n\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n\n        const offset = stickyOffsets[rowIndex];\n        const isBorderedRowIndex = rowIndex === borderedRowIndex;\n\n        for (const element of elementsToStick[rowIndex]) {\n          this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n        }\n      }\n\n      if (position === 'top') {\n        (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      } else {\n        (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      }\n    });\n  }\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n\n\n  updateStickyFooterContainer(tableElement, stickyStates) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n\n    const tfoot = tableElement.querySelector('tfoot'); // Coalesce with other sticky updates (and potentially other changes like column resize).\n\n    this._coalescedStyleScheduler.schedule(() => {\n      if (stickyStates.some(state => !state)) {\n        this._removeStickyStyle(tfoot, ['bottom']);\n      } else {\n        this._addStickyStyle(tfoot, 'bottom', 0, false);\n      }\n    });\n  }\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n\n\n  _removeStickyStyle(element, stickyDirections) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n      element.classList.remove(this._borderCellCss[dir]);\n    } // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    // Short-circuit checking element.style[dir] for stickyDirections as they\n    // were already removed above.\n\n\n    const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n\n    if (hasDirection) {\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    } else {\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\n      element.style.zIndex = '';\n\n      if (this._needsPositionStickyOnElement) {\n        element.style.position = '';\n      }\n\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n\n\n  _addStickyStyle(element, dir, dirValue, isBorderElement) {\n    element.classList.add(this._stickCellCss);\n\n    if (isBorderElement) {\n      element.classList.add(this._borderCellCss[dir]);\n    }\n\n    element.style[dir] = `${dirValue}px`;\n    element.style.zIndex = this._getCalculatedZIndex(element);\n\n    if (this._needsPositionStickyOnElement) {\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    }\n  }\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n\n\n  _getCalculatedZIndex(element) {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1\n    };\n    let zIndex = 0; // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n\n    for (const dir of STICKY_DIRECTIONS) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n\n    return zIndex ? `${zIndex}` : '';\n  }\n  /** Gets the widths for each cell in the provided row. */\n\n\n  _getCellWidths(row, recalculateCellWidths = true) {\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\n      return this._cachedCellWidths;\n    }\n\n    const cellWidths = [];\n    const firstRowCells = row.children;\n\n    for (let i = 0; i < firstRowCells.length; i++) {\n      let cell = firstRowCells[i];\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n\n    this._cachedCellWidths = cellWidths;\n    return cellWidths;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n\n\n  _getStickyStartColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n\n\n  _getStickyEndColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\n\n\nfunction getTableUnknownColumnError(id) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\n\n\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(`Could not find a matching row definition for the` + `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\n\n\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\n\n\nfunction getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the StickyPositioningListener. */\n\n\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n\nclass CdkRecycleRows {}\n\nCdkRecycleRows.ɵfac = function CdkRecycleRows_Factory(t) {\n  return new (t || CdkRecycleRows)();\n};\n\nCdkRecycleRows.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkRecycleRows,\n  selectors: [[\"cdk-table\", \"recycleRows\", \"\"], [\"table\", \"cdk-table\", \"\", \"recycleRows\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _RecycleViewRepeaterStrategy\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkRecycleRows, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n\n\nclass DataRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n\n}\n\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n  return new (t || DataRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nDataRowOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DataRowOutlet,\n  selectors: [[\"\", \"rowOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[rowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n\n\nclass HeaderRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n\n}\n\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n  return new (t || HeaderRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nHeaderRowOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: HeaderRowOutlet,\n  selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeaderRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[headerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n\n\nclass FooterRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n\n}\n\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n  return new (t || FooterRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nFooterRowOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FooterRowOutlet,\n  selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FooterRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[footerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\n\n\nclass NoDataRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n\n}\n\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) {\n  return new (t || NoDataRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nNoDataRowOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NoDataRowOutlet,\n  selectors: [[\"\", \"noDataRowOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NoDataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[noDataRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\n\n\nconst CDK_TABLE_TEMPLATE = // Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\n\nclass RowViewRef extends EmbeddedViewRef {}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n\n\nclass CdkTable {\n  constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler,\n  /**\n   * @deprecated `_stickyPositioningListener` parameter to become required.\n   * @breaking-change 13.0.0\n   */\n  _stickyPositioningListener,\n  /**\n   * @deprecated `_ngZone` parameter to become required.\n   * @breaking-change 14.0.0\n   */\n  _ngZone) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    this._platform = _platform;\n    this._viewRepeater = _viewRepeater;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._viewportRuler = _viewportRuler;\n    this._stickyPositioningListener = _stickyPositioningListener;\n    this._ngZone = _ngZone;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n\n    this._columnDefsByName = new Map();\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n\n    this._customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n\n    this._customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n\n    this._customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n\n    this._customFooterRowDefs = new Set();\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n\n    this._stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n     */\n\n    this._forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n\n    this._cachedRenderRowsMap = new Map();\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     */\n\n    this.stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n\n    this.needsPositionStickyOnElement = true;\n    /** Whether the no data row is currently showing anything. */\n\n    this._isShowingNoDataRow = false;\n    this._multiTemplateDataRows = false;\n    this._fixedLayout = false;\n    /**\n     * Emits when the table completes rendering a set of data rows based on the latest data from the\n     * data source, even if the set of rows is empty.\n     */\n\n    this.contentChanged = new EventEmitter(); // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'table');\n    }\n\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n\n\n  get trackBy() {\n    return this._trackByFn;\n  }\n\n  set trackBy(fn) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n\n    this._trackByFn = fn;\n  }\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   */\n\n\n  get dataSource() {\n    return this._dataSource;\n  }\n\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   */\n\n\n  get multiTemplateDataRows() {\n    return this._multiTemplateDataRows;\n  }\n\n  set multiTemplateDataRows(v) {\n    this._multiTemplateDataRows = coerceBooleanProperty(v); // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n    // this setter will be invoked before the row outlet has been defined hence the null check.\n\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n\n      this.updateStickyColumnStyles();\n    }\n  }\n  /**\n   * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n   * and optimize rendering sticky styles for native tables. No-op for flex tables.\n   */\n\n\n  get fixedLayout() {\n    return this._fixedLayout;\n  }\n\n  set fixedLayout(v) {\n    this._fixedLayout = coerceBooleanProperty(v); // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n\n    this._forceRecalculateCellWidths = true;\n    this._stickyColumnStylesNeedReset = true;\n  }\n\n  ngOnInit() {\n    this._setupStickyStyler();\n\n    if (this._isNativeHtmlTable) {\n      this._applyNativeTableSections();\n    } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n\n\n    this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n\n    this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      this._forceRecalculateCellWidths = true;\n    });\n  }\n\n  ngAfterContentChecked() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n\n    this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.\n\n\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingRowDefsError();\n    } // Render updates if the list of columns have been changed for the header, row, or footer defs.\n\n\n    const columnsChanged = this._renderUpdatedColumns();\n\n    const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged; // Ensure sticky column styles are reset if set to `true` elsewhere.\n\n    this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n    this._forceRecalculateCellWidths = rowDefsChanged; // If the header row definition has been changed, trigger a render to the header row.\n\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n\n      this._headerRowDefChanged = false;\n    } // If the footer row definition has been changed, trigger a render to the footer row.\n\n\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n\n      this._footerRowDefChanged = false;\n    } // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n\n\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    } else if (this._stickyColumnStylesNeedReset) {\n      // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n      // called when it row data arrives. Otherwise, we need to call it proactively.\n      this.updateStickyColumnStyles();\n    }\n\n    this._checkStickyStates();\n  }\n\n  ngOnDestroy() {\n    [this._rowOutlet.viewContainer, this._headerRowOutlet.viewContainer, this._footerRowOutlet.viewContainer, this._cachedRenderRowsMap, this._customColumnDefs, this._customRowDefs, this._customHeaderRowDefs, this._customFooterRowDefs, this._columnDefsByName].forEach(def => {\n      def.clear();\n    });\n    this._headerRowDefs = [];\n    this._footerRowDefs = [];\n    this._defaultRowDef = null;\n\n    this._onDestroy.next();\n\n    this._onDestroy.complete();\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n  }\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   */\n\n\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n\n    const changes = this._dataDiffer.diff(this._renderRows);\n\n    if (!changes) {\n      this._updateNoDataRow();\n\n      this.contentChanged.next();\n      return;\n    }\n\n    const viewContainer = this._rowOutlet.viewContainer;\n\n    this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, change => {\n      if (change.operation === 1\n      /* INSERTED */\n      && change.context) {\n        this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n      }\n    }); // Update the meta context of a row's context data (index, count, first, last, ...)\n\n\n    this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n\n\n    changes.forEachIdentityChange(record => {\n      const rowView = viewContainer.get(record.currentIndex);\n      rowView.context.$implicit = record.item.data;\n    });\n\n    this._updateNoDataRow(); // Allow the new row data to render before measuring it.\n    // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n\n\n    if (this._ngZone && NgZone.isInAngularZone()) {\n      this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n        this.updateStickyColumnStyles();\n      });\n    } else {\n      this.updateStickyColumnStyles();\n    }\n\n    this.contentChanged.next();\n  }\n  /** Adds a column definition that was not included as part of the content children. */\n\n\n  addColumnDef(columnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n  /** Removes a column definition that was not included as part of the content children. */\n\n\n  removeColumnDef(columnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n  /** Adds a row definition that was not included as part of the content children. */\n\n\n  addRowDef(rowDef) {\n    this._customRowDefs.add(rowDef);\n  }\n  /** Removes a row definition that was not included as part of the content children. */\n\n\n  removeRowDef(rowDef) {\n    this._customRowDefs.delete(rowDef);\n  }\n  /** Adds a header row definition that was not included as part of the content children. */\n\n\n  addHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n\n    this._headerRowDefChanged = true;\n  }\n  /** Removes a header row definition that was not included as part of the content children. */\n\n\n  removeHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n\n    this._headerRowDefChanged = true;\n  }\n  /** Adds a footer row definition that was not included as part of the content children. */\n\n\n  addFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n\n    this._footerRowDefChanged = true;\n  }\n  /** Removes a footer row definition that was not included as part of the content children. */\n\n\n  removeFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n\n    this._footerRowDefChanged = true;\n  }\n  /** Sets a no data row definition that was not included as a part of the content children. */\n\n\n  setNoDataRow(noDataRow) {\n    this._customNoDataRow = noDataRow;\n  }\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n\n\n  updateStickyHeaderRowStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n    const tableElement = this._elementRef.nativeElement; // Hide the thead element if there are no header rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n\n    const thead = tableElement.querySelector('thead');\n\n    if (thead) {\n      thead.style.display = headerRows.length ? '' : 'none';\n    }\n\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\n\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.\n\n\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n\n\n  updateStickyFooterRowStyles() {\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n    const tableElement = this._elementRef.nativeElement; // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n\n    const tfoot = tableElement.querySelector('tfoot');\n\n    if (tfoot) {\n      tfoot.style.display = footerRows.length ? '' : 'none';\n    }\n\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\n\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.\n\n\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   */\n\n\n  updateStickyColumnStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n\n    const footerRows = this._getRenderedRows(this._footerRowOutlet); // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n    // In a table using a fixed layout, row content won't affect column width, so sticky styles\n    // don't need to be cleared unless either the sticky column config changes or one of the row\n    // defs change.\n\n\n    if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n      // Clear the left and right positioning from all columns in the table across all rows since\n      // sticky columns span across all table sections (header, data, footer)\n      this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n\n      this._stickyColumnStylesNeedReset = false;\n    } // Update the sticky styles for each header row depending on the def's sticky state\n\n\n    headerRows.forEach((headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    }); // Update the sticky styles for each data row depending on its def's sticky state\n\n    this._rowDefs.forEach(rowDef => {\n      // Collect all the rows rendered with this row definition.\n      const rows = [];\n\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n\n      this._addStickyColumnStyles(rows, rowDef);\n    }); // Update the sticky styles for each footer row depending on the def's sticky state\n\n\n    footerRows.forEach((footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    }); // Reset the dirty state of the sticky input change since it has been used.\n\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   */\n\n\n  _getAllRenderRows() {\n    const renderRows = []; // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n\n    for (let i = 0; i < this._data.length; i++) {\n      let data = this._data[i];\n\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        let renderRow = renderRowsForData[j];\n\n        const cache = this._cachedRenderRowsMap.get(renderRow.data);\n\n        if (cache.has(renderRow.rowDef)) {\n          cache.get(renderRow.rowDef).push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n\n        renderRows.push(renderRow);\n      }\n    }\n\n    return renderRows;\n  }\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   */\n\n\n  _getRenderRowsForData(data, dataIndex, cache) {\n    const rowDefs = this._getRowDefs(data, dataIndex);\n\n    return rowDefs.map(rowDef => {\n      const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n\n      if (cachedRenderRows.length) {\n        const dataRow = cachedRenderRows.shift();\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {\n          data,\n          rowDef,\n          dataIndex\n        };\n      }\n    });\n  }\n  /** Update the map containing the content's column definitions. */\n\n\n  _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n\n    const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n    columnDefs.forEach(columnDef => {\n      if (this._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n  /** Update the list of all available row definitions that can be used. */\n\n\n  _cacheRowDefs() {\n    this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n    this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n    this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs); // After all row definitions are determined, find the row definition to be considered default.\n\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   */\n\n\n  _renderUpdatedColumns() {\n    const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff(); // Force re-render data rows if the list of column definitions have changed.\n\n\n    const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n\n    if (dataColumnsChanged) {\n      this._forceRenderDataRows();\n    } // Force re-render header/footer rows if the list of column definitions have changed.\n\n\n    const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n\n    if (headerColumnsChanged) {\n      this._forceRenderHeaderRows();\n    }\n\n    const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n\n    if (footerColumnsChanged) {\n      this._forceRenderFooterRows();\n    }\n\n    return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n  }\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   */\n\n\n  _switchDataSource(dataSource) {\n    this._data = [];\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    } // Stop listening for data from the previous data source.\n\n\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n\n      this._renderChangeSubscription = null;\n    }\n\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n\n      this._rowOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n  /** Set up a subscription for the data provided by the data source. */\n\n\n  _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n\n    let dataStream;\n\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect(this);\n    } else if (isObservable(this.dataSource)) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = of(this.dataSource);\n    }\n\n    if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableUnknownDataSourceError();\n    }\n\n    this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n      this._data = data || [];\n      this.renderRows();\n    });\n  }\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   */\n\n\n  _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n\n    this.updateStickyHeaderRowStyles();\n  }\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   */\n\n\n  _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n\n    this.updateStickyFooterRowStyles();\n  }\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\n\n\n  _addStickyColumnStyles(rows, rowDef) {\n    const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n      const columnDef = this._columnDefsByName.get(columnName);\n\n      if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnName);\n      }\n\n      return columnDef;\n    });\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n  }\n  /** Gets the list of rows that have been rendered in the row outlet. */\n\n\n  _getRenderedRows(rowOutlet) {\n    const renderedRows = [];\n\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      const viewRef = rowOutlet.viewContainer.get(i);\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n\n    return renderedRows;\n  }\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   */\n\n\n  _getRowDefs(data, dataIndex) {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n\n    let rowDefs = [];\n\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n\n    if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n\n    return rowDefs;\n  }\n\n  _getEmbeddedViewArgs(renderRow, index) {\n    const rowDef = renderRow.rowDef;\n    const context = {\n      $implicit: renderRow.data\n    };\n    return {\n      templateRef: rowDef.template,\n      context,\n      index\n    };\n  }\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   */\n\n\n  _renderRow(outlet, rowDef, index, context = {}) {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n    this._renderCellTemplateForItem(rowDef, context);\n\n    return view;\n  }\n\n  _renderCellTemplateForItem(rowDef, context) {\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n\n\n  _updateRowIndexContext() {\n    const viewContainer = this._rowOutlet.viewContainer;\n\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex);\n      const context = viewRef.context;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n  /** Gets the column definitions for the provided row def. */\n\n\n  _getCellTemplates(rowDef) {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n\n    return Array.from(rowDef.columns, columnId => {\n      const column = this._columnDefsByName.get(columnId);\n\n      if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return rowDef.extractCellTemplate(column);\n    });\n  }\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n\n\n  _applyNativeTableSections() {\n    const documentFragment = this._document.createDocumentFragment();\n\n    const sections = [{\n      tag: 'thead',\n      outlets: [this._headerRowOutlet]\n    }, {\n      tag: 'tbody',\n      outlets: [this._rowOutlet, this._noDataRowOutlet]\n    }, {\n      tag: 'tfoot',\n      outlets: [this._footerRowOutlet]\n    }];\n\n    for (const section of sections) {\n      const element = this._document.createElement(section.tag);\n\n      element.setAttribute('role', 'rowgroup');\n\n      for (const outlet of section.outlets) {\n        element.appendChild(outlet.elementRef.nativeElement);\n      }\n\n      documentFragment.appendChild(element);\n    } // Use a DocumentFragment so we don't hit the DOM on each iteration.\n\n\n    this._elementRef.nativeElement.appendChild(documentFragment);\n  }\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   */\n\n\n  _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n\n    this._rowOutlet.viewContainer.clear();\n\n    this.renderRows();\n  }\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   */\n\n\n  _checkStickyStates() {\n    const stickyCheckReducer = (acc, d) => {\n      return acc || d.hasStickyChanged();\n    }; // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n\n\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this._stickyColumnStylesNeedReset = true;\n      this.updateStickyColumnStyles();\n    }\n  }\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   */\n\n\n  _setupStickyStyler() {\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n    (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(value => {\n      this._stickyStyler.direction = value;\n      this.updateStickyColumnStyles();\n    });\n  }\n  /** Filters definitions that belong to this table from a QueryList. */\n\n\n  _getOwnDefs(items) {\n    return items.filter(item => !item._table || item._table === this);\n  }\n  /** Creates or removes the no data row, depending on whether any data is being shown. */\n\n\n  _updateNoDataRow() {\n    const noDataRow = this._customNoDataRow || this._noDataRow;\n\n    if (!noDataRow) {\n      return;\n    }\n\n    const shouldShow = this._rowOutlet.viewContainer.length === 0;\n\n    if (shouldShow === this._isShowingNoDataRow) {\n      return;\n    }\n\n    const container = this._noDataRowOutlet.viewContainer;\n\n    if (shouldShow) {\n      const view = container.createEmbeddedView(noDataRow.templateRef);\n      const rootNode = view.rootNodes[0]; // Only add the attributes if we have a single root node since it's hard\n      // to figure out which one to add it to when there are multiple.\n\n      if (view.rootNodes.length === 1 && (rootNode === null || rootNode === void 0 ? void 0 : rootNode.nodeType) === this._document.ELEMENT_NODE) {\n        rootNode.setAttribute('role', 'row');\n        rootNode.classList.add(noDataRow._contentClassName);\n      }\n    } else {\n      container.clear();\n    }\n\n    this._isShowingNoDataRow = shouldShow;\n  }\n\n}\n\nCdkTable.ɵfac = function CdkTable_Factory(t) {\n  return new (t || CdkTable)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵinjectAttribute('role'), i0.ɵɵdirectiveInject(i1.Directionality, 8), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), i0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12), i0.ɵɵdirectiveInject(i0.NgZone, 8));\n};\n\nCdkTable.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkTable,\n  selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n  contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    }\n  },\n  viewQuery: function CdkTable_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(DataRowOutlet, 7);\n      i0.ɵɵviewQuery(HeaderRowOutlet, 7);\n      i0.ɵɵviewQuery(FooterRowOutlet, 7);\n      i0.ɵɵviewQuery(NoDataRowOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-table\"],\n  hostVars: 2,\n  hostBindings: function CdkTable_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n    }\n  },\n  inputs: {\n    trackBy: \"trackBy\",\n    dataSource: \"dataSource\",\n    multiTemplateDataRows: \"multiTemplateDataRows\",\n    fixedLayout: \"fixedLayout\"\n  },\n  outputs: {\n    contentChanged: \"contentChanged\"\n  },\n  exportAs: [\"cdkTable\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_TABLE,\n    useExisting: CdkTable\n  }, {\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _DisposeViewRepeaterStrategy\n  }, {\n    provide: _COALESCED_STYLE_SCHEDULER,\n    useClass: _CoalescedStyleScheduler\n  }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n  {\n    provide: STICKY_POSITIONING_LISTENER,\n    useValue: null\n  }])],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function CdkTable_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c0);\n      i0.ɵɵprojection(0);\n      i0.ɵɵprojection(1, 1);\n      i0.ɵɵelementContainer(2, 0);\n      i0.ɵɵelementContainer(3, 1);\n      i0.ɵɵelementContainer(4, 2);\n      i0.ɵɵelementContainer(5, 3);\n    }\n  },\n  directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n  styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTable, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-table, table[cdk-table]',\n      exportAs: 'cdkTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'cdk-table',\n        '[class.cdk-table-fixed-layout]': 'fixedLayout'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CDK_TABLE,\n        useExisting: CdkTable\n      }, {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }],\n      styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.IterableDiffers\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['role']\n      }]\n    }, {\n      type: i1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i2.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [_VIEW_REPEATER_STRATEGY]\n      }]\n    }, {\n      type: _CoalescedStyleScheduler,\n      decorators: [{\n        type: Inject,\n        args: [_COALESCED_STYLE_SCHEDULER]\n      }]\n    }, {\n      type: i3.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [STICKY_POSITIONING_LISTENER]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    trackBy: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input\n    }],\n    multiTemplateDataRows: [{\n      type: Input\n    }],\n    fixedLayout: [{\n      type: Input\n    }],\n    contentChanged: [{\n      type: Output\n    }],\n    _rowOutlet: [{\n      type: ViewChild,\n      args: [DataRowOutlet, {\n        static: true\n      }]\n    }],\n    _headerRowOutlet: [{\n      type: ViewChild,\n      args: [HeaderRowOutlet, {\n        static: true\n      }]\n    }],\n    _footerRowOutlet: [{\n      type: ViewChild,\n      args: [FooterRowOutlet, {\n        static: true\n      }]\n    }],\n    _noDataRowOutlet: [{\n      type: ViewChild,\n      args: [NoDataRowOutlet, {\n        static: true\n      }]\n    }],\n    _contentColumnDefs: [{\n      type: ContentChildren,\n      args: [CdkColumnDef, {\n        descendants: true\n      }]\n    }],\n    _contentRowDefs: [{\n      type: ContentChildren,\n      args: [CdkRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentHeaderRowDefs: [{\n      type: ContentChildren,\n      args: [CdkHeaderRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentFooterRowDefs: [{\n      type: ContentChildren,\n      args: [CdkFooterRowDef, {\n        descendants: true\n      }]\n    }],\n    _noDataRow: [{\n      type: ContentChild,\n      args: [CdkNoDataRow]\n    }]\n  });\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\n\n\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n\n\nclass CdkTextColumn {\n  constructor( // `CdkTextColumn` is always requiring a table, but we just assert it manually\n  // for better error reporting.\n  // tslint:disable-next-line: lightweight-tokens\n  _table, _options) {\n    this._table = _table;\n    this._options = _options;\n    /** Alignment of the cell values. */\n\n    this.justify = 'start';\n    this._options = _options || {};\n  }\n  /** Column name that should be used to reference this column. */\n\n\n  get name() {\n    return this._name;\n  }\n\n  set name(name) {\n    this._name = name; // With Ivy, inputs can be initialized before static query results are\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n\n    this._syncColumnDefName();\n  }\n\n  ngOnInit() {\n    this._syncColumnDefName();\n\n    if (this.headerText === undefined) {\n      this.headerText = this._createDefaultHeaderText();\n    }\n\n    if (!this.dataAccessor) {\n      this.dataAccessor = this._options.defaultDataAccessor || ((data, name) => data[name]);\n    }\n\n    if (this._table) {\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n      // since the columnDef will not pick up its content by the time the table finishes checking\n      // its content and initializing the rows.\n      this.columnDef.cell = this.cell;\n      this.columnDef.headerCell = this.headerCell;\n\n      this._table.addColumnDef(this.columnDef);\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTableTextColumnMissingParentTableError();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this.columnDef);\n    }\n  }\n  /**\n   * Creates a default header text. Use the options' header text transformation function if one\n   * has been provided. Otherwise simply capitalize the column name.\n   */\n\n\n  _createDefaultHeaderText() {\n    const name = this.name;\n\n    if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableTextColumnMissingNameError();\n    }\n\n    if (this._options && this._options.defaultHeaderTextTransform) {\n      return this._options.defaultHeaderTextTransform(name);\n    }\n\n    return name[0].toUpperCase() + name.slice(1);\n  }\n  /** Synchronizes the column definition name with the text column name. */\n\n\n  _syncColumnDefName() {\n    if (this.columnDef) {\n      this.columnDef.name = this.name;\n    }\n  }\n\n}\n\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) {\n  return new (t || CdkTextColumn)(i0.ɵɵdirectiveInject(CdkTable, 8), i0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8));\n};\n\nCdkTextColumn.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkTextColumn,\n  selectors: [[\"cdk-text-column\"]],\n  viewQuery: function CdkTextColumn_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkColumnDef, 7);\n      i0.ɵɵviewQuery(CdkCellDef, 7);\n      i0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    }\n  },\n  inputs: {\n    name: \"name\",\n    headerText: \"headerText\",\n    dataAccessor: \"dataAccessor\",\n    justify: \"justify\"\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n  template: function CdkTextColumn_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainerStart(0, 0);\n      i0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n      i0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n      i0.ɵɵelementContainerEnd();\n    }\n  },\n  directives: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-text-column',\n      template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: CdkTable,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TEXT_COLUMN_OPTIONS]\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    headerText: [{\n      type: Input\n    }],\n    dataAccessor: [{\n      type: Input\n    }],\n    justify: [{\n      type: Input\n    }],\n    columnDef: [{\n      type: ViewChild,\n      args: [CdkColumnDef, {\n        static: true\n      }]\n    }],\n    cell: [{\n      type: ViewChild,\n      args: [CdkCellDef, {\n        static: true\n      }]\n    }],\n    headerCell: [{\n      type: ViewChild,\n      args: [CdkHeaderCellDef, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\n\nclass CdkTableModule {}\n\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) {\n  return new (t || CdkTableModule)();\n};\n\nCdkTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdkTableModule\n});\nCdkTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ScrollingModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTableModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS,\n      imports: [ScrollingModule]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };","map":{"version":3,"names":["coerceBooleanProperty","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","isDataSource","_DisposeViewRepeaterStrategy","DataSource","DOCUMENT","i0","InjectionToken","Directive","Inject","Optional","Input","ContentChild","Injectable","Component","ChangeDetectionStrategy","ViewEncapsulation","EmbeddedViewRef","EventEmitter","NgZone","Attribute","SkipSelf","Output","ViewChild","ContentChildren","NgModule","Subject","from","BehaviorSubject","isObservable","of","takeUntil","take","i1","i2","i3","ScrollingModule","mixinHasStickyInput","base","constructor","args","_sticky","_hasStickyChanged","sticky","v","prevValue","hasStickyChanged","resetStickyChanged","CDK_TABLE","TEXT_COLUMN_OPTIONS","CdkCellDef","template","ɵfac","TemplateRef","ɵdir","type","selector","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","name","_name","_setNameInput","stickyEnd","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","value","replace","provide","useExisting","inputs","providers","undefined","decorators","cell","headerCell","footerCell","BaseCdkCell","columnDef","elementRef","nativeElement","classList","add","CdkHeaderCell","ElementRef","host","CdkFooterCell","_a","_elementRef","nodeType","tableRole","getAttribute","role","setAttribute","CdkCell","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_ngZone","_currentSchedule","_destroyed","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","ngOnDestroy","next","complete","_getScheduleObservable","pipe","subscribe","length","isStable","Promise","resolve","onStable","ɵprov","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","IterableDiffers","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","ViewContainerRef","CdkHeaderRow","ɵcmp","changeDetection","Default","encapsulation","None","CdkFooterRow","CdkRow","CdkNoDataRow","templateRef","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","ELEMENT_NODE","i","children","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","slice","map","width","index","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","_b","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","remove","hasDirection","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","widths","positions","nextPosition","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","STICKY_POSITIONING_LISTENER","CdkRecycleRows","useClass","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","CDK_TABLE_TEMPLATE","RowViewRef","CdkTable","_changeDetectorRef","_dir","_document","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","contentChanged","viewChange","Number","MAX_VALUE","nodeName","trackBy","_trackByFn","fn","ngDevMode","console","warn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","change","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","columnsChanged","_renderUpdatedColumns","rowDefsChanged","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","_headerRowOutlet","_footerRowOutlet","forEach","def","clear","_defaultRowDef","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","rowView","get","$implicit","isInAngularZone","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","_stickyStyler","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","when","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isArray","_renderRow","columnName","rowOutlet","renderedRows","viewRef","rootNodes","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","first","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","outlets","_noDataRowOutlet","section","createElement","appendChild","stickyCheckReducer","d","isBrowser","items","_noDataRow","shouldShow","container","rootNode","ChangeDetectorRef","Directionality","Platform","ViewportRuler","useValue","exportAs","styles","static","descendants","array","concat","CdkTextColumn","_options","justify","_syncColumnDefName","headerText","_createDefaultHeaderText","dataAccessor","defaultDataAccessor","defaultHeaderTextTransform","toUpperCase","EXPORTED_DECLARATIONS","CdkTableModule","ɵmod","ɵinj","exports","declarations","imports"],"sources":["/home/jochydev/Proyectos de Estudio/MEAN-Restaurant/node_modules/@angular/cdk/fesm2015/table.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Input, ContentChild, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, NgZone, Attribute, SkipSelf, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkCellDef, selector: \"[cdkCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkHeaderCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFooterCellDef, selector: \"[cdkFooterCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkFooterCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n}\nCdkColumnDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkColumnDef, deps: [{ token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkColumnDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], stickyEnd: [{\n                type: Input,\n                args: ['stickyEnd']\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkFooterCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFooterCell, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable\n            ? from(Promise.resolve(undefined))\n            : this._ngZone.onStable.pipe(take(1));\n    }\n}\n_CoalescedStyleScheduler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\n_CoalescedStyleScheduler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _CoalescedStyleScheduler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nBaseRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: BaseRowDef, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }]; } });\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkHeaderRowDef, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFooterRowDef, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkRowDef, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCellOutlet, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCellOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkHeaderRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkHeaderRow, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkFooterRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFooterRow, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkRow, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._contentClassName = 'cdk-no-data-row';\n    }\n}\nCdkNoDataRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkNoDataRow, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkNoDataRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkNoDataRow, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            if (!states[rowIndex]) {\n                continue;\n            }\n            stickyOffsets[rowIndex] = stickyOffset;\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable\n                ? Array.from(row.children)\n                : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            var _a, _b;\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n}\nCdkRecycleRows.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkRecycleRows.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkRecycleRows, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: DataRowOutlet, selector: \"[rowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[rowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: HeaderRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nHeaderRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[headerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FooterRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nFooterRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[footerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NoDataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nNoDataRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[noDataRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener, \n    /**\n     * @deprecated `_ngZone` parameter to become required.\n     * @breaking-change 14.0.0\n     */\n    _ngZone) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        this._ngZone = _ngZone;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet.viewContainer,\n            this._headerRowOutlet.viewContainer,\n            this._footerRowOutlet.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach(def => {\n            def.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === 1 /* INSERTED */ && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        // Allow the new row data to render before measuring it.\n        // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n        if (this._ngZone && NgZone.isInAngularZone()) {\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n                this.updateStickyColumnStyles();\n            });\n        }\n        else {\n            this.updateStickyColumnStyles();\n        }\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && (rootNode === null || rootNode === void 0 ? void 0 : rootNode.nodeType) === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n    }\n}\nCdkTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.Directionality, optional: true }, { token: DOCUMENT }, { token: i2.Platform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.ViewportRuler }, { token: STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTable, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n        { provide: CDK_TABLE, useExisting: CdkTable },\n        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n        // Prevent nested tables from seeing this table's StickyPositioningListener.\n        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n    ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], viewQueries: [{ propertyName: \"_rowOutlet\", first: true, predicate: DataRowOutlet, descendants: true, static: true }, { propertyName: \"_headerRowOutlet\", first: true, predicate: HeaderRowOutlet, descendants: true, static: true }, { propertyName: \"_footerRowOutlet\", first: true, predicate: FooterRowOutlet, descendants: true, static: true }, { propertyName: \"_noDataRowOutlet\", first: true, predicate: NoDataRowOutlet, descendants: true, static: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], directives: [{ type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { type: DataRowOutlet, selector: \"[rowOutlet]\" }, { type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['role']\n                    }] }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i2.Platform }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [_VIEW_REPEATER_STRATEGY]\n                    }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                        type: Inject,\n                        args: [_COALESCED_STYLE_SCHEDULER]\n                    }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }, {\n                        type: Inject,\n                        args: [STICKY_POSITIONING_LISTENER]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input\n            }], fixedLayout: [{\n                type: Input\n            }], contentChanged: [{\n                type: Output\n            }], _rowOutlet: [{\n                type: ViewChild,\n                args: [DataRowOutlet, { static: true }]\n            }], _headerRowOutlet: [{\n                type: ViewChild,\n                args: [HeaderRowOutlet, { static: true }]\n            }], _footerRowOutlet: [{\n                type: ViewChild,\n                args: [FooterRowOutlet, { static: true }]\n            }], _noDataRowOutlet: [{\n                type: ViewChild,\n                args: [NoDataRowOutlet, { static: true }]\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTextColumn, deps: [{ token: CdkTable, optional: true }, { token: TEXT_COLUMN_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkTextColumn.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTextColumn, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, directives: [{ type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"sticky\", \"cdkColumnDef\", \"stickyEnd\"] }, { type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { type: CdkCellDef, selector: \"[cdkCellDef]\" }, { type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }], ctorParameters: function () {\n        return [{ type: CdkTable, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [TEXT_COLUMN_OPTIONS]\n                    }] }];\n    }, propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTableModule, declarations: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n        CdkNoDataRow,\n        CdkRecycleRows,\n        NoDataRowOutlet], imports: [ScrollingModule], exports: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n        CdkNoDataRow,\n        CdkRecycleRows,\n        NoDataRowOutlet] });\nCdkTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTableModule, imports: [[ScrollingModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}